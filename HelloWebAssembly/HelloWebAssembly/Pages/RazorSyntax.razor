@page "/razor-syntax"
@inject HttpClient Http


@* Inline expressions *@
<h1>Blazor WebAssembly is @Text!</h1>  

@* Control structures *@
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else{
    @* Conditionals *@
    <h1>Conditionals if</h1>
    @if (DateTime.Now.DayOfWeek.ToString() != "Friday")
    {
        <p>Today is not Friday.</p>
    }
    else if (DateTime.Now.Day != 13)
    {
        <p>Today is not the 13th.</p>
    }
    else
    {
        <p>Today is Friday the 13th.</p>
    }

    @* Switch statement *@
    <h1>Conditionals switch</h1>
    @switch (value)
    {
        case 1:
            <p>The value is 1!</p>
            break;
        case 42:
            <p>Your number is 42!</p>
            break;
        default:
            <p>Your number was not 1 or 42.</p>
            break;
    }

    @* Loops *@
    @* For Loop *@
    <h1> for Loop </h1>
    @for (var i = 0; i < forecasts.Count(); i++)
    {
        <div>@forecasts[i].Summary</div>
    };

    @* Foreach Loop *@
    <h1> foreach Loop </h1>
    @foreach (var forecast in forecasts)
    {
        <div>@forecast.Summary</div>
    };

    @* While Loop *@
    <h1> while Loop </h1>
    @while (i < forecasts.Count())
    {
        <div>@forecasts[i].Summary</div>
        i++;
    };

    @* Do While Loop *@
    <h1> do while Loop </h1>
    i=0;
    @do
    {
        <div>@forecasts[i].Summary</div>
        i++;
    } while (i < forecasts.Count());
    
}


@code {
    public string Text ="amazing";
    private WeatherForecast[]? forecasts;
    private int value = 2;
    private int i=0;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}